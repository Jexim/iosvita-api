{"version":3,"sources":["../../src/models/index.js"],"names":["basename","path","__filename","env","process","NODE_ENV","config","configJson","console","log","db","sequelize","environment","Sequelize","use_env_variable","DB_NAME","DB_USER","DB_PASS","host","DB_HOST","port","DB_PORT","dialect","dialectOption","ssl","logging","database","username","password","fs","readdirSync","__dirname","filter","file","indexOf","slice","forEach","model","join","name","Object","keys","modelName","associate"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,QAAQ,GAAGC,iBAAKD,QAAL,CAAcE,UAAd,CAAjB;;AACA,IAAMC,GAAG,GAAGC,OAAO,CAACD,GAAR,CAAYE,QAAZ,GAAuBD,OAAO,CAACD,GAAR,CAAYE,QAAnC,GAA8C,aAA1D;AAEA,IAAMC,MAAM,GAAGC,qBAAWJ,GAAX,CAAf;AAEAK,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCN,GAAzC;AAEA,IAAMO,EAAE,GAAG,EAAX;AAEA,IAAIC,SAAJ;;AACA,IAAIL,MAAM,CAACM,WAAP,KAAuB,YAA3B,EAAyC;AACvCD,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CAAcT,OAAO,CAACD,GAAR,CAAYG,MAAM,CAACQ,gBAAnB,CAAd,EAAoDR,MAApD,CAAZ;AACAK,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CAAcT,OAAO,CAACD,GAAR,CAAYY,OAA1B,EAAmCX,OAAO,CAACD,GAAR,CAAYa,OAA/C,EAAwDZ,OAAO,CAACD,GAAR,CAAYc,OAApE,EAA6E;AACvFC,IAAAA,IAAI,EAAEd,OAAO,CAACD,GAAR,CAAYgB,OADqE;AAEvFC,IAAAA,IAAI,EAAEhB,OAAO,CAACD,GAAR,CAAYkB,OAFqE;AAGvFC,IAAAA,OAAO,EAAE,UAH8E;AAIvFC,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAE,IADQ;AAEb,gBAAQ;AAFK,KAJwE;AAQvFC,IAAAA,OAAO,EAAE;AAR8E,GAA7E,CAAZ;AAUD,CAZD,MAYO;AACLd,EAAAA,SAAS,GAAG,IAAIE,qBAAJ,CAAcP,MAAM,CAACoB,QAArB,EAA+BpB,MAAM,CAACqB,QAAtC,EAAgDrB,MAAM,CAACsB,QAAvD,EAAiEtB,MAAjE,CAAZ;AACD;;AAEDuB,eAAGC,WAAH,CAAeC,SAAf,EACGC,MADH,CACU,UAAAC,IAAI,EAAI;AACd,SAAOA,IAAI,CAACC,OAAL,CAAa,GAAb,MAAsB,CAAtB,IAA2BD,IAAI,KAAKjC,QAApC,IAAgDiC,IAAI,CAACE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAA1E;AACD,CAHH,EAIGC,OAJH,CAIW,UAAAH,IAAI,EAAI;AACf,MAAMI,KAAK,GAAG1B,SAAS,UAAT,CAAiBV,iBAAKqC,IAAL,CAAUP,SAAV,EAAqBE,IAArB,CAAjB,CAAd;AACAvB,EAAAA,EAAE,CAAC2B,KAAK,CAACE,IAAP,CAAF,GAAiBF,KAAjB;AACD,CAPH;;AASAG,MAAM,CAACC,IAAP,CAAY/B,EAAZ,EAAgB0B,OAAhB,CAAwB,UAAAM,SAAS,EAAI;AACnC,MAAIhC,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAlB,EAA6B;AAC3BjC,IAAAA,EAAE,CAACgC,SAAD,CAAF,CAAcC,SAAd,CAAwBjC,EAAxB;AACD;AACF,CAJD;AAMAA,EAAE,CAACC,SAAH,GAAeA,SAAf;AACAD,EAAE,CAACG,SAAH,GAAeA,qBAAf;eAEeH,E","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport Sequelize from \"sequelize\";\nimport configJson from \"../config/database\";\n\nconst basename = path.basename(__filename);\nconst env = process.env.NODE_ENV ? process.env.NODE_ENV : \"development\";\n\nconst config = configJson[env];\n\nconsole.log(\"this is the environment: \", env);\n\nconst db = {};\n\nlet sequelize;\nif (config.environment === \"production\") {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n  sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASS, {\n    host: process.env.DB_HOST,\n    port: process.env.DB_PORT,\n    dialect: \"postgres\",\n    dialectOption: {\n      ssl: true,\n      native: true\n    },\n    logging: true\n  });\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nfs.readdirSync(__dirname)\n  .filter(file => {\n    return file.indexOf(\".\") !== 0 && file !== basename && file.slice(-3) === \".js\";\n  })\n  .forEach(file => {\n    const model = sequelize.import(path.join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach(modelName => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n"],"file":"index.js"}