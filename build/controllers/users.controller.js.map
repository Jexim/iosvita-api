{"version":3,"sources":["../../src/controllers/users.controller.js"],"names":["responseUtils","ResponseUtils","signUp","req","res","newUser","body","email","password","setError","send","validator","isEmail","UsersService","create","createdUser","dataValues","setSuccess","message","signIn","authentication","token"],"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,aAAa,GAAG,IAAIC,oBAAJ,EAAtB;;SAEsBC,M;;;;;;;+BAAf,iBAAsBC,GAAtB,EAA2BC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,YAAAA,OADD,GACWF,GAAG,CAACG,IADf;;AAAA,kBAGD,CAACD,OAAO,CAACE,KAAT,IAAkB,CAACF,OAAO,CAACG,QAH1B;AAAA;AAAA;AAAA;;AAAA,6CAIIR,aAAa,CAACS,QAAd,CAAuB,GAAvB,EAA4B,oCAA5B,EAAkEC,IAAlE,CAAuEN,GAAvE,CAJJ;;AAAA;AAAA,gBAOAO,sBAAUC,OAAV,CAAkBP,OAAO,CAACE,KAA1B,CAPA;AAAA;AAAA;AAAA;;AAAA,6CAQIP,aAAa,CAACS,QAAd,CAAuB,GAAvB,EAA4B,oBAA5B,EAAkDC,IAAlD,CAAuDN,GAAvD,CARJ;;AAAA;AAAA;AAAA;AAAA,mBAYuBS,YAAY,CAACC,MAAb,CAAoBT,OAApB,CAZvB;;AAAA;AAYGU,YAAAA,WAZH;AAcH,mBAAOA,WAAW,CAACC,UAAZ,CAAuBR,QAA9B;AAdG,6CAgBIR,aAAa,CAACiB,UAAd,CAAyB,GAAzB,EAA8BF,WAA9B,EAA2C,cAA3C,EAA2DL,IAA3D,CAAgEN,GAAhE,CAhBJ;;AAAA;AAAA;AAAA;AAAA,6CAkBIJ,aAAa,CAACS,QAAd,CAAuB,GAAvB,EAA4B,YAAMS,OAAlC,EAA2CR,IAA3C,CAAgDN,GAAhD,CAlBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAsBee,M;;;;;;;+BAAf,kBAAsBhB,GAAtB,EAA2BC,GAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACD,CAACD,GAAG,CAACG,IAAJ,CAASC,KAAV,IAAmB,CAACJ,GAAG,CAACG,IAAJ,CAASE,QAD5B;AAAA;AAAA;AAAA;;AAAA,8CAEIR,aAAa,CAACS,QAAd,CAAuB,GAAvB,EAA4B,oCAA5B,EAAkEC,IAAlE,CAAuEN,GAAvE,CAFJ;;AAAA;AAAA;AAAA;AAAA,mBAMiBS,YAAY,CAACO,cAAb,CAA4B;AAC9Cb,cAAAA,KAAK,EAAEJ,GAAG,CAACG,IAAJ,CAASC,KAD8B;AAE9CC,cAAAA,QAAQ,EAAEL,GAAG,CAACG,IAAJ,CAASE;AAF2B,aAA5B,CANjB;;AAAA;AAMGa,YAAAA,KANH;AAAA,8CAWIrB,aAAa,CAACiB,UAAd,CAAyB,GAAzB,EAA8B;AAAEI,cAAAA,KAAK,EAALA;AAAF,aAA9B,EAAyC,mBAAzC,EAA8DX,IAA9D,CAAmEN,GAAnE,CAXJ;;AAAA;AAAA;AAAA;AAAA,8CAaIJ,aAAa,CAACS,QAAd,CAAuB,GAAvB,EAA4B,aAAMS,OAAlC,EAA2CR,IAA3C,CAAgDN,GAAhD,CAbJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import validator from \"validator\";\nimport * as UsersService from \"../services/users.service\";\nimport ResponseUtils from \"../utils/response.utils\";\n\nconst responseUtils = new ResponseUtils();\n\nexport async function signUp(req, res) {\n  const newUser = req.body;\n\n  if (!newUser.email || !newUser.password) {\n    return responseUtils.setError(400, \"Email or password can not be empty\").send(res);\n  }\n\n  if (!validator.isEmail(newUser.email)) {\n    return responseUtils.setError(400, \"Email is not valid\").send(res);\n  }\n\n  try {\n    const createdUser = await UsersService.create(newUser);\n\n    delete createdUser.dataValues.password;\n\n    return responseUtils.setSuccess(201, createdUser, \"User created\").send(res);\n  } catch (error) {\n    return responseUtils.setError(400, error.message).send(res);\n  }\n}\n\nexport async function signIn(req, res) {\n  if (!req.body.email || !req.body.password) {\n    return responseUtils.setError(400, \"Email or password can not be empty\").send(res);\n  }\n\n  try {\n    const token = await UsersService.authentication({\n      email: req.body.email,\n      password: req.body.password\n    });\n\n    return responseUtils.setSuccess(200, { token }, \"User auth success\").send(res);\n  } catch (error) {\n    return responseUtils.setError(400, error.message).send(res);\n  }\n}\n"],"file":"users.controller.js"}