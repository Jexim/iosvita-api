{"version":3,"sources":["../../src/controllers/products.controller.js"],"names":["responseUtils","ResponseUtils","productsList","req","res","query","limit","offset","filters","JSON","parse","console","log","ProductsService","list","setSuccess","send","setError","message","createProduct","newProduct","body","title","price","create","createdProduct"],"mappings":";;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,aAAa,GAAG,IAAIC,oBAAJ,EAAtB;;SAEsBC,Y;;;;;;;+BAAf,iBAA4BC,GAA5B,EAAiCC,GAAjC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAGuBD,GAAG,CAACE,KAH3B,EAGKC,KAHL,cAGKA,KAHL,EAGYC,MAHZ,cAGYA,MAHZ;AAIGC,YAAAA,OAJH,GAIaC,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACE,KAAJ,CAAUG,OAArB,CAJb;AAKHG,YAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AALG,0BAMIR,aANJ;AAAA;AAAA,mBAMwCa,eAAe,CAACC,IAAhB,CAAqB;AAAER,cAAAA,KAAK,EAALA,KAAF;AAASC,cAAAA,MAAM,EAANA,MAAT;AAAiBC,cAAAA,OAAO,EAAPA;AAAjB,aAArB,CANxC;;AAAA;AAAA;AAAA,0BAM+FJ,GAN/F;AAAA,yDAMkBW,UANlB,mBAM6B,GAN7B,eAM0FC,IAN1F;;AAAA;AAAA;AAAA;AAAA,6CAQIhB,aAAa,CAACiB,QAAd,CAAuB,GAAvB,EAA4B,YAAMC,OAAlC,EAA2CF,IAA3C,CAAgDZ,GAAhD,CARJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAYee,a;;;;;;;+BAAf,kBAA6BhB,GAA7B,EAAkCC,GAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AACCgB,YAAAA,UADD,GACcjB,GAAG,CAACkB,IADlB;;AAAA,gBAGAD,UAAU,CAACE,KAHX;AAAA;AAAA;AAAA;;AAAA,8CAIItB,aAAa,CAACiB,QAAd,CAAuB,GAAvB,EAA4B,wBAA5B,EAAsDD,IAAtD,CAA2DZ,GAA3D,CAJJ;;AAAA;AAAA,gBAOAgB,UAAU,CAACG,KAPX;AAAA;AAAA;AAAA;;AAAA,8CAQIvB,aAAa,CAACiB,QAAd,CAAuB,GAAvB,EAA4B,wBAA5B,EAAsDD,IAAtD,CAA2DZ,GAA3D,CARJ;;AAAA;AAAA;AAAA;AAAA,mBAY0BS,eAAe,CAACW,MAAhB,CAAuBJ,UAAvB,CAZ1B;;AAAA;AAYGK,YAAAA,cAZH;AAAA,8CAcIzB,aAAa,CAACe,UAAd,CAAyB,GAAzB,EAA8BU,cAA9B,EAA8C,iBAA9C,EAAiET,IAAjE,CAAsEZ,GAAtE,CAdJ;;AAAA;AAAA;AAAA;AAAA,8CAgBIJ,aAAa,CAACiB,QAAd,CAAuB,GAAvB,EAA4B,aAAMC,OAAlC,EAA2CF,IAA3C,CAAgDZ,GAAhD,CAhBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import * as ProductsService from \"../services/products.service\";\nimport ResponseUtils from \"../utils/response.utils\";\n\nconst responseUtils = new ResponseUtils();\n\nexport async function productsList(req, res) {\n  try {\n    \n    const { limit, offset } = req.query;\n    const filters = JSON.parse(req.query.filters);\n    console.log(filters);\n    return responseUtils.setSuccess(200, await ProductsService.list({ limit, offset, filters })).send(res);\n  } catch (error) {\n    return responseUtils.setError(400, error.message).send(res);\n  }\n}\n\nexport async function createProduct(req, res) {\n  const newProduct = req.body;\n\n  if (!newProduct.title) {\n    return responseUtils.setError(400, \"Title can not be empty\").send(res);\n  }\n\n  if (!newProduct.price) {\n    return responseUtils.setError(400, \"Price can not be empty\").send(res);\n  }\n\n  try {\n    const createdProduct = await ProductsService.create(newProduct);\n\n    return responseUtils.setSuccess(201, createdProduct, \"Product created\").send(res);\n  } catch (error) {\n    return responseUtils.setError(400, error.message).send(res);\n  }\n}\n"],"file":"products.controller.js"}