{"version":3,"sources":["../../src/services/users.service.js"],"names":["saltRounds","seecret","appConfig","process","env","NODE_ENV","create","newUser","password","bcrypt","hashSync","database","User","authentication","email","findOne","where","user","compareSync","dataValues","token","jwt","sign","id","expiresIn","Error"],"mappings":";;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAEA,IAAMA,UAAU,GAAG,EAAnB;AACA,IAAMC,OAAO,GAAGC,gBAAUC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,aAAlC,EAAiDJ,OAAjE;;SAEsBK,M;;;;;;;+BAAf,iBAAsBC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEHA,YAAAA,OAAO,CAACC,QAAR,GAAmBC,mBAAOC,QAAP,CAAgBH,OAAO,CAACC,QAAxB,EAAkCR,UAAlC,CAAnB;AAFG;AAAA,mBAIUW,mBAASC,IAAT,CAAcN,MAAd,CAAqBC,OAArB,CAJV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;SAUeM,c;;;;;;;+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgCC,YAAAA,KAAhC,QAAgCA,KAAhC,EAAuCN,QAAvC,QAAuCA,QAAvC;AAAA;AAAA;AAAA,mBAEgBG,mBAASC,IAAT,CAAcG,OAAd,CAAsB;AAAEC,cAAAA,KAAK,EAAE;AAAEF,gBAAAA,KAAK,EAALA;AAAF;AAAT,aAAtB,CAFhB;;AAAA;AAEGG,YAAAA,IAFH;;AAAA,kBAICA,IAAI,IAAIR,mBAAOS,WAAP,CAAmBV,QAAnB,EAA6BS,IAAI,CAACE,UAAL,CAAgBX,QAA7C,CAJT;AAAA;AAAA;AAAA;;AAKKY,YAAAA,KALL,GAKaC,yBAAIC,IAAJ,CAAS;AAAEC,cAAAA,EAAE,EAAEN,IAAI,CAACE,UAAL,CAAgBI;AAAtB,aAAT,EAAqCtB,OAArC,EAA8C;AAAEuB,cAAAA,SAAS,EAAE;AAAb,aAA9C,CALb;AAAA,8CAOMJ,KAPN;;AAAA;AAAA,kBASK,IAAIK,KAAJ,CAAU,2BAAV,CATL;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport database from \"../models\";\nimport appConfig from \"../config/app\";\n\nconst saltRounds = 10;\nconst seecret = appConfig[process.env.NODE_ENV || \"development\"].seecret;\n\nexport async function create(newUser) {\n  try {\n    newUser.password = bcrypt.hashSync(newUser.password, saltRounds);\n\n    return await database.User.create(newUser);\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function authentication({ email, password }) {\n  try {\n    const user = await database.User.findOne({ where: { email } });\n\n    if (user && bcrypt.compareSync(password, user.dataValues.password)) {\n      const token = jwt.sign({ id: user.dataValues.id }, seecret, { expiresIn: \"1d\" });\n\n      return token;\n    } else {\n      throw new Error(\"Invalid email or password\");\n    }\n  } catch (error) {\n    throw error;\n  }\n}\n"],"file":"users.service.js"}