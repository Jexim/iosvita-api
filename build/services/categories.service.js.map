{"version":3,"sources":["../../src/services/categories.service.js"],"names":["doc","GoogleSpreadsheet","appConfig","process","env","NODE_ENV","googleSheetId","list","database","Category","findAll","parseFromDocs","Promise","resolve","reject","getInfo","error","info","sheet","worksheets","find","item","title","getRows","rows","categoriesTree","unflatten","map","parent","destroy","where","topCategory","createCategory","categoryParseObject","parentCategory","create","ParentId","id","undefined","newCategory","children","length","childCategory","arr","tree","mappedArr","arrElem","mappedElem","i","len","hasOwnProperty","push"],"mappings":"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","sourcesContent":["import GoogleSpreadsheet from \"google-spreadsheet\";\nimport database from \"../models\";\nimport appConfig from \"../config/app\";\n\nconst doc = new GoogleSpreadsheet(appConfig[process.env.NODE_ENV || \"development\"].googleSheetId);\n\nexport async function list() {\n  try {\n    return await database.Category.findAll();\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function parseFromDocs() {\n  return new Promise((resolve, reject) => {\n    doc.getInfo(function(error, info) {\n      if (error) return reject(error);\n      const sheet = info.worksheets.find(item => item.title === \"Categories\");\n\n      sheet.getRows({}, async (error, rows) => {\n        if (error) reject(error);\n\n        const categoriesTree = unflatten(\n          rows.map(item => ({\n            title: item[\"title\"],\n            parent: item[\"parent\"],\n          }))\n        );\n        \n        try {\n          await database.Category.destroy({ where: {} });\n\n          for (const topCategory of categoriesTree) {\n            await createCategory(topCategory);\n          }\n          resolve(categoriesTree);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  });\n}\n\nexport async function createCategory(categoryParseObject, parentCategory) {\n  try {\n    const newCategory = await database.Category.create({ title: categoryParseObject.title, ParentId: parentCategory ? parentCategory.id : undefined });\n\n    if (categoryParseObject.children.length) {\n      for (let childCategory of categoryParseObject.children) {\n        await createCategory(childCategory, newCategory);\n      }\n    }\n  } catch (error) {\n    throw error;\n  }\n}\n\nfunction unflatten(arr) {\n  let tree = [],\n    mappedArr = {},\n    arrElem,\n    mappedElem;\n\n  for (let i = 0, len = arr.length; i < len; i++) {\n    arrElem = arr[i];\n    mappedArr[arrElem.title] = arrElem;\n    mappedArr[arrElem.title][\"children\"] = [];\n  }\n\n  for (let title in mappedArr) {\n    if (mappedArr.hasOwnProperty(title)) {\n      mappedElem = mappedArr[title];\n      if (mappedElem.parent) {\n        mappedArr[mappedElem[\"parent\"]][\"children\"].push(mappedElem);\n      } else {\n        tree.push(mappedElem);\n      }\n    }\n  }\n  return tree;\n}\n"],"file":"categories.service.js"}