{"version":3,"sources":["../../src/services/products.service.js"],"names":["doc","GoogleSpreadsheet","appConfig","process","env","NODE_ENV","googleSheetId","create","newProduct","database","Product","list","limit","offset","filters","findAndCountAll","where","parseFromDocs","Promise","resolve","reject","getInfo","error","info","sheet","worksheets","find","item","title","getRows","rows","destroy","createdProducts","productRow","Category","findOne","category","price","description","image","CategoryId","id","undefined","DkId","dk","push"],"mappings":"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","sourcesContent":["import GoogleSpreadsheet from \"google-spreadsheet\";\nimport database from \"../models\";\nimport appConfig from \"../../config/app\";\n\nconst doc = new GoogleSpreadsheet(appConfig[process.env.NODE_ENV || \"development\"].googleSheetId);\n\nexport async function create(newProduct) {\n  try {\n    return await database.Product.create(newProduct);\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function list({ limit, offset, filters }) {\n  try {\n    return await database.Product.findAndCountAll({ offset, limit, where: filters });\n  } catch (error) {\n    throw error;\n  }\n}\n\nexport async function parseFromDocs() {\n  return new Promise((resolve, reject) => {\n    doc.getInfo(function(error, info) {\n      if (error) return reject(error);\n      const sheet = info.worksheets.find(item => item.title === \"Products\");\n\n      sheet.getRows({}, async (error, rows) => {\n        if (error) reject(error);\n\n        await database.Product.destroy({ where: {} });\n        const createdProducts = [];\n        try {\n          for (const productRow of rows) {\n            const category = await database.Category.findOne({\n              where: { title: productRow[\"category\"] }\n            });\n\n            const newProduct = {\n              title: productRow.title,\n              price: +productRow.price,\n              description: productRow.description,\n              image: productRow.image,\n              CategoryId: category ? category.id : undefined,\n              DkId: productRow.dk\n            };\n\n            createdProducts.push(await database.Product.create(newProduct));\n          }\n          resolve(createdProducts);\n        } catch (error) {\n          reject(error);\n        }\n      });\n    });\n  });\n}\n"],"file":"products.service.js"}